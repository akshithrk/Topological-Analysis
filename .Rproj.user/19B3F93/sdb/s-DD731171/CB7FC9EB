{
    "collab_server" : "",
    "contents" : "getwd()\ninstall.packages(\"Hmisc\")\nlibrary(Hmisc)\ninstall.packages(\"TDA\")\nlibrary(TDA)\n\nX <- circleUnif(400)\nX\ndescribe(X)\nsummary(X)\nXlim <- c(-1.6, 1.6)\nYlim <- c(-1.7, 1.7)\nby <- 0.065\n\nXseq <- seq(Xlim[1], Xlim[2], by = by)\nYseq <- seq(Ylim[1], Ylim[2], by = by)\nGrid <- expand.grid(Xseq, Yseq)\n\n# distance function\ndistance <- distFct(X = X, Grid = Grid)\ndistance\n\nm0 <- 0.1\n\n#dtm function\n\nDTM <- dtm(X = X, Grid = Grid, m0 = m0)\ndtm\n\n#kNN density estimator\nk <- 60\nkNN <- knnDE(X = X, Grid = Grid, k = k)\nkNN\n\n\n\n#kernel distance estimator\nh <- 0.3\nKDE <- kde(X = X, Grid = Grid, h = h)\nKdist <- kernelDist(X = X, Grid = Grid, h = h)\nKdist\n\n#viz a 2 dimensional example \n#using persp from the graphics package\n\nattach(mtcars)\npar(mfrow=c(1,1))\n\n#X data viz\npersp(Xseq, Yseq,\n      matrix(X, ncol = length(Yseq), nrow = length(Xseq)), xlab = \"Xseq on X-axis\",\n      ylab = \"Yseq on Y-axis\", zlab = \"Z-axis\", theta = \"-30\", phi = \"20\", ltheta = \"30\",\n      col = 3, border = NA, main = \"X\", d = \"0.5\", scale = FALSE,\n      expand = 0.5, shade = 0.9)\n\n#presp = perspective plot\n#persp() returns the viewing transformation matrix, say VT, a 4 x 4 matrix suitable for projecting 3D coordinates (x,y,z) \n#into the 2D plane using homogeneous 4D coordinates (x,y,z,t). \n#It can be used to superimpose additional graphical elements on the 3D plot, by lines() or points(), using the function trans3d().\n#https://stat.ethz.ch/R-manual/R-devel/library/graphics/html/persp.html\n#theta = turn plot right or view plot from left\n#phi = view plot from top\n#ltheta = color intensity\n#d = expands the coordinate point box in which the plot exists\n#explnd = expland/stretch the graph. lesser number bigger the plot i.e. more stretch\n\n\n#kde viz\npersp(Xseq, Yseq,\n      matrix(KDE, ncol = length(Yseq), nrow = length(Xseq)), xlab = \"\",\n      ylab = \"\", zlab = \"\", theta = \"-30\", phi = \"25\", ltheta = \"50\",\n      col = 2, border = NA, main = \"KDE\", d = \"0.3\", scale = FALSE,\n      expand = 2, shade = 0.9)\n\n#distance function viz\npersp(Xseq, Yseq,\n      matrix(distance, ncol = length(Yseq), nrow = length(Xseq)), xlab = \"\",\n      ylab = \"\", zlab = \"\", theta = \"-30\", phi = \"35\", ltheta = \"50\",\n      col = 2, border = NA, main = \"Distance Function\", d = \"0.5\", scale = FALSE,\n      expand = 3, shade = 0.9)\n\n#dtm function viz\npersp(Xseq, Yseq,\n      matrix(dtm, ncol = length(Yseq), nrow = length(Xseq)), xlab = \"\",\n      ylab = \"\", zlab = \"\", theta = \"-20\", phi = \"35\", ltheta = \"50\",\n      col = 2, border = NA, main = \"DTM\", d = \"0.5\", scale = FALSE,\n      expand = 3, shade = 0.9)\n\n#knn viz\npersp(Xseq, Yseq,\n      matrix(kNN, ncol = length(Yseq), nrow = length(Xseq)), xlab = \"\",\n      ylab = \"\", zlab = \"\", theta = \"-25\", phi = \"25\", ltheta = \"50\",\n      col = \"Yellow\", border = NA, main = \"kNN\", d = \"0.5\", scale = FALSE,\n      expand = 3, shade = 0.9)\n\n#kernel distance viz\npersp(Xseq, Yseq,\n      matrix(Kdist, ncol = length(Yseq), nrow = length(Xseq)), xlab = \"\",\n      ylab = \"\", zlab = \"\", theta = \"-20\", phi = \"35\", ltheta = \"50\",\n      col = 2, border = NA, main = \"Kernel Distance\", d = \"0.5\", scale = FALSE,\n      expand = 3, shade = 0.9)\n\n#Bootstrap confidence bands\n# for kernel density estimators, distance to measure, and kernel distance, \n#and use it in the framework of persistent homology\n\nband <- bootstrapBand(X = X, FUN = kde, Grid = Grid, B = 100,\n                      parallel = FALSE, alpha = 0.1, h = h)\nband\n\n#plot(band,\n#     main = \"KDE Diagram\")\n\n#gridDiag\n# gridDiag function to compute the persistent\n# homology of sublevel (and superlevel) sets of the functions\n\nDiag <- gridDiag(X = X, FUN = kde, h = 0.3, lim = cbind(Xlim, Ylim),\n                  by = by, sublevel = FALSE, library = \"Dionysus\",\n                  printProgress = FALSE)\n\nDiag\n\n#viz of persistent homology using the grid diag function\nplot(Diag[[\"diagram\"]], band = 2 * band[[\"width\"]],\n     main = \"KDE Diagram\")\n\n#The plot on the right shows the persistence diagram of the superlevel sets of the\n#KDE. Black points represent connected components and red triangles represent loops. The\n#features are born at high levels of the density and die at lower levels. The pink 90% confidence\n#band separates significant features from noise.\n\nplot(Diag[[\"diagram\"]], rotated = TRUE, band = band[[\"width\"]],\n      main = \"Rotated Diagram\")\n\nplot(Diag[[\"diagram\"]], barcode = TRUE, main = \"Barcode\")\n\n\n#Rips Diag\n#The ripsDiag function computes the persistence diagram of the Rips filtration built on top\n#of a point cloud. The user can choose to compute the Rips persistence diagram using either\n#the C++ library GUDHI, or Dionysus.\n\nCircle1 <- circleUnif(60)\nCircle2 <- circleUnif(60, r = 2) + 3\nplot(Circle1)\nplot(Circle2)\nplot(circleUnif(60, r = 2))\nCircles <- rbind(Circle1, Circle2)\nplot(Circles)\n\nmaxscale <- 5 # limit of the filtration\nmaxdimension <- 1 # components and loops\n\n#persistence diagram from ripsDiag function\nDiag_rips <- ripsDiag(X = Circles, maxdimension, maxscale,\n                 library = \"GUDHI\", printProgress = FALSE)\n\nplot(Circles)\nplot(Diag_rips[[\"diagram\"]])\n#Black points represent connected components and red\n#triangles represent loops\n\n# other viz available from different functions such as \n# 1. Alpha complex persistence\n# 2. Persistence diagram of alpha shape\n# 3. Bottleneck and Wasserstein Distances\n# 4. Landscapes and Silhouettes\n\n\n#Density Clustering\n#Let f be the density of the probability distribution P\n#generating the observed sample X = {x1, . . . , xn} ⊂ Rd. \n#For a threshold value λ > 0, the corresponding super level set \n#of f is Lf (λ) := cl({x ∈ Rs: f(x) > λ}), \n#and its d-dimensional\n#subsets are called high-density regions. The high-density clusters of P are the maximal\n#connected subsets of Lf (λ). By considering all the level sets simultaneously \n#(from λ = 0 to λ = ∞), \n#we can record the evolution and the hierarchy of the high-density clusters of P.\n#This naturally leads to the notion of the cluster density tree of P (see, e.g., Hartigan (1981)),\n#defined as the collection of sets T := {Lf (λ), λ ≥ 0},\n#which satisfies the tree property:\n#A, B ∈ T implies that A ⊂ B or B ⊂ A or A∩B = ∅.\n\n",
    "created" : 1498532168350.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1824960140",
    "id" : "CB7FC9EB",
    "lastKnownWriteTime" : 1498709942,
    "last_content_update" : 1498709942884,
    "path" : "P:/R/Topological Analysis/TDA.R",
    "project_path" : "TDA.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}